// Code generated by ogen, DO NOT EDIT.

package client

import (
	"io"
)

// Ref: #/components/schemas/batch
type Batch struct {
	// Keys list.
	Keys []string `json:"keys"`
	// Cursor used for pagination.
	Cursor int64 `json:"cursor"`
}

// GetKeys returns the value of Keys.
func (s *Batch) GetKeys() []string {
	return s.Keys
}

// GetCursor returns the value of Cursor.
func (s *Batch) GetCursor() int64 {
	return s.Cursor
}

// SetKeys sets the value of Keys.
func (s *Batch) SetKeys(val []string) {
	s.Keys = val
}

// SetCursor sets the value of Cursor.
func (s *Batch) SetCursor(val int64) {
	s.Cursor = val
}

// DeleteNamespaceNoContent is response for DeleteNamespace operation.
type DeleteNamespaceNoContent struct{}

// DeleteNoContent is response for Delete operation.
type DeleteNoContent struct{}

// GetNotFound is response for Get operation.
type GetNotFound struct{}

func (*GetNotFound) getRes() {}

type GetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetOKHeaders wraps GetOK with response headers.
type GetOKHeaders struct {
	XContentType string
	XTTL         OptFloat64
	Response     GetOK
}

// GetXContentType returns the value of XContentType.
func (s *GetOKHeaders) GetXContentType() string {
	return s.XContentType
}

// GetXTTL returns the value of XTTL.
func (s *GetOKHeaders) GetXTTL() OptFloat64 {
	return s.XTTL
}

// GetResponse returns the value of Response.
func (s *GetOKHeaders) GetResponse() GetOK {
	return s.Response
}

// SetXContentType sets the value of XContentType.
func (s *GetOKHeaders) SetXContentType(val string) {
	s.XContentType = val
}

// SetXTTL sets the value of XTTL.
func (s *GetOKHeaders) SetXTTL(val OptFloat64) {
	s.XTTL = val
}

// SetResponse sets the value of Response.
func (s *GetOKHeaders) SetResponse(val GetOK) {
	s.Response = val
}

func (*GetOKHeaders) getRes() {}

type HeaderAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *HeaderAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *HeaderAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// SetNoContent is response for Set operation.
type SetNoContent struct{}

type SetReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SetReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// SetReqWithContentType wraps SetReq with Content-Type.
type SetReqWithContentType struct {
	ContentType string
	Content     SetReq
}

// GetContentType returns the value of ContentType.
func (s *SetReqWithContentType) GetContentType() string {
	return s.ContentType
}

// GetContent returns the value of Content.
func (s *SetReqWithContentType) GetContent() SetReq {
	return s.Content
}

// SetContentType sets the value of ContentType.
func (s *SetReqWithContentType) SetContentType(val string) {
	s.ContentType = val
}

// SetContent sets the value of Content.
func (s *SetReqWithContentType) SetContent(val SetReq) {
	s.Content = val
}
